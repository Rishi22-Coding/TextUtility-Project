{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","role","type","msg","Navbar","mode","href","title","id","HomeText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","AboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.219bcc12.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n    return (\n        props.alert && <div className={`alert alert-primary alert-dismissible fade show`} role=\"alert\">\n            <strong>{props.alert.type}</strong>: {props.alert.msg} \n        </div>\n    )\n}\n\nexport default Alert","import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.HomeText}</Link> */}\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.HomeText}</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.AboutText}</Link>\n                        </li> */}\n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    HomeText: PropTypes.string.isRequired,\n    AboutText: PropTypes.string.isRequired\n}\nNavbar.defaultProps = {\n    title: 'TextUtils',\n    HomeText: 'Home',\n    AboutText: 'About'\n}\n","import React, { useState } from 'react'\n\nexport default function TextForm(props) {\n    const handleUpClick=()=>{\n        // console.log(\"UpperCase was Clicked\"+text);\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to UpperCase\", \"Success\");\n    }\n    const handleClsClick=()=>{\n        // console.log(\"UpperCase was Clicked\"+text);\n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared\", \"Success\");\n    }\n    const handleDwnClick=()=>{\n        let newText=text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to LowerCase\", \"Success\");\n    }\n    const handleOnChange = (event) => {\n        // console.log(\"On Change\");\n        setText(event.target.value);\n    }\n    const handleCopy=()=>{\n        console.log(\"I am Copied\");\n        var text=document.getElementById(\"myTextBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Copied Text\", \"Success\");\n    }\n    const handleExtraSpaces=()=>{\n        let newText=text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra Space Removed\", \"Success\");\n    }\n    const [text, setText] = useState('Enter Text Here');\n    return (\n        <>\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myTextBox\" rows=\"8\"></textarea>\n                </div>\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Upper Case</button>\n                <button className=\"btn btn-secondary mx-1\" onClick={handleClsClick}>Clear</button>\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleDwnClick}>Convert to Lower Case</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n            </div>\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\n                <h2>Your Text Summary</h2>\n                <p><b>{text.split(\" \").length}</b> word and <b>{text.length}</b> characters</p>\n                <p><b>{0.008 * text.split(\" \").length}</b> Minutes to Read</p>\n                <h1>Preview</h1>\n                <p>{text.length>0?text:\"Enter Your Text To Preview\"} </p>\n            </div>\n        </>\n    )\n}\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1600);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode Has Been Enabled\", \"Success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Has Been Enabled\", \"Success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter Text Below To Analyze\" mode={mode} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}